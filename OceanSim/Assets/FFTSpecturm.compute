#define INV2PI	0.15915494309f
#define INVPI2	0.63661977236f
#define HPI		1.57079632679f
#define PI		3.14159265358f
#define PI2		6.28318530717f
#define HSQRT2	0.70710678118f

#define gravity 9.81

#pragma kernel spectrumInit
#pragma kernel spectrumUpdate

RWTexture2D<float4> ResultSpectrum;
uint size;
float domainSize;
float inputWindspeed;
float inputDepth;
float fetch;


float AlphaBetaSpectrum(float A, float B, float g, float w, float wm)
{
    return (A * g * g / pow(w, 5.0f)) * exp(-B * pow(wm / w, 4.0f));
}

float peakSharpening(float omega, float peakOmega, float gamma)
{
    float sigma = (omega <= peakOmega) ? 0.07f : 0.09f;
    float temp1 = (omega - peakOmega) / (sigma * peakOmega);
    float temp2 = temp1 * temp1 * -1;
    return pow(gamma, exp(temp2 / 2));
}

float JONSWAP(float omega)
{
    float mainFetch = fetch * 1000;
    float dimensionlessFetch = abs(gravity * mainFetch / (inputWindspeed * inputWindspeed));
    float alpha = 0.076f * pow(dimensionlessFetch, -0.22f);
    float peakOmega = PI2 * 3.5f * abs(gravity / inputWindspeed) * pow(dimensionlessFetch, -0.33f);
    return AlphaBetaSpectrum(alpha, 1.25f, gravity, omega, peakOmega) * peakSharpening(omega, peakOmega, 3.3f);
}

float kitaigorodskiiDepth(float omega)
{
    float wh = omega * sqrt(inputDepth / gravity);
    return 0.5 + 0.5 * tanh(1.8 * (wh - 1.125));
}

float tma(float omega)
{
    return kitaigorodskiiDepth(omega)* JONSWAP(omega);
}

float PhillipsSpectrum(float w)
{
    float A = 0.01f;
    float B = gravity / inputWindspeed;
    return AlphaBetaSpectrum(A, B, gravity, w, 1.0f);
}

float PiersonMoskowitzSpectrum(float w)
{
    float wm = 0.87f * gravity / inputWindspeed;
    return AlphaBetaSpectrum(8.1e-3f, 1.291f, gravity, w, wm);
}


float DirectionalSpreading(float w, float theta, float kMag, float dTheta)
{
    if (theta > -HPI && theta < HPI)
    {
        float ct = cos(theta);
        return INVPI2 * (ct * ct);
    }
    else
    {
        return 0.0f;
    }
}

uint rngState;

float RandFloat()
{
    rngState ^= (rngState << 13);
    rngState ^= (rngState >> 17);
    rngState ^= (rngState << 5);
    return rngState / 4294967296.0f;
}

uint WangHash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

float RandGauss()
{
    float u1 = RandFloat();
    float u2 = RandFloat();
    if (u1 < 1e-6f)
    {
        u1 = 1e-6f;
    }
    return sqrt(-2.0f * log(u1)) * cos(PI2 * u2);
}

void DeepDispersion(float k, out float w, out float dwdk)
{
    w = sqrt(abs(gravity * k));
    dwdk = gravity / (2.0f * w);
}

float NullFilter(float k)
{
    return 1.0f;
}

#define Dispersion DeepDispersion
#define Spectrum tma
#define Filter NullFilter

[numthreads(8, 8, 1)]
void spectrumInit(uint2 id : SV_DispatchThreadID)
{
    int2 center = size.xx / 2;
    int2 coord = id - center;
    if (coord.x == 0 && coord.y == 0)
    {
        ResultSpectrum[id] = float4(0, 0, 0, 0);
        return;
    }

    float2 k = PI2 * coord / domainSize;
    float kMag = length(k);
    rngState = WangHash(id.y * size + id.x);
    float w; float dwdk;
    Dispersion(kMag, w, dwdk);
    float spectrum = Spectrum(w);
    float deltaSPos = spectrum;
    float deltaSNeg = spectrum;

    float dK = PI2 / domainSize;
    float thetaPos = atan2(-k.y, k.x);
    float thetaNeg = atan2(k.y, -k.x);
    float dTheta = abs(atan2(dK, kMag));
    deltaSPos *= DirectionalSpreading(w, thetaPos, kMag, dTheta);
    deltaSNeg *= DirectionalSpreading(w, thetaNeg, kMag, dTheta);
    deltaSPos *= (dK * dK) * dwdk / kMag;
    deltaSNeg *= (dK * dK) * dwdk / kMag;

    float ampPos = RandGauss() * sqrt(abs(deltaSPos) * 2.0f);
    float ampNeg = RandGauss() * sqrt(abs(deltaSNeg) * 2.0f);

    float filter = Filter(kMag);
    ampPos *= filter;
    ampNeg *= filter;

    float phasePos = RandFloat() * PI2;
    float phaseNeg = RandFloat() * PI2;
    ResultSpectrum[id] = float4(
        ampPos * float2(cos(phasePos), -sin(phasePos)),
        ampNeg * float2(cos(phaseNeg), -sin(phaseNeg)));
}

float2 cmul(float2 first, float2 second)
{
    return float2(
        first.x * second.x - first.y * second.y,
        first.x * second.y + first.y * second.x
        );
}

float time;

Texture2D<float4> inputH0;
RWTexture2D<float2> outputH;
RWTexture2D<float2> outputDx;
RWTexture2D<float2> outputDy;

[numthreads(8, 8, 1)]
void spectrumUpdate(uint2 id : SV_DispatchThreadID)
{
    int2 center = size.xx / 2;
    int2 coord = id - center;
    float2 k = PI2 * coord / domainSize;
    float kMag = length(k);
    
    float w; float dwdk;
    Dispersion(kMag, w, dwdk);

    float sw; float cw;
    sincos(w * time, sw, cw);

    float2 fwd = float2(cw, -sw);
    float2 bkwd = float2(cw, sw);

    float4 h0 = inputH0[id];
    float2 h = cmul(h0.xy, fwd) + cmul(h0.zw, bkwd);

    outputH[id] = h;
    outputDx[id] = float2(-h.y * k.x, h.x * k.x) / (kMag + 0.00001f);
    outputDy[id] = float2(-h.y * k.y, h.x * k.y) / (kMag + 0.00001f);
}
